// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Using PostgreSQL, but you can use SQLite for development
  url      = env("DATABASE_URL")
}

// Define roles for user accounts
enum UserRole {
  STUDENT
  COUNSELOR
  PARENT
  UNIVERSITY
  ADMIN
}

// Define status for professional requests
enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

// User model for authentication and profile
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  accounts      Account[]
  sessions      Session[]
  
  // Firebase tokens for notifications
  notificationTokens UserNotificationToken[]
  essays        Essay[]   // Add relation to essays
}

// Store Firebase Cloud Messaging tokens for push notifications
model UserNotificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationship to user
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Professional registration requests
model ProfessionalRequest {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  role         UserRole
  organization String
  position     String
  message      String        @default("") @db.Text
  status       RequestStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// Invitations for professional accounts
model Invitation {
  id        String    @id @default(cuid())
  token     String    @unique
  email     String
  name      String
  role      UserRole
  metadata  Json      @default("{}")
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// NextAuth.js Models
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Essay {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  prompt    String?  @db.Text
  version   Int      @default(1)
  aiAssisted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?  // Foreign key to User model
  user      User?    @relation(fields: [userId], references: [id])
  feedback  EssayFeedback?
}

model EssayFeedback {
  id                 String   @id @default(cuid())
  essayId           String   @unique
  essay             Essay    @relation(fields: [essayId], references: [id], onDelete: Cascade)
  overallAssessment String   @db.Text
  strengths         String[] @db.Text
  areasForImprovement String[] @db.Text
  suggestions       String[] @db.Text
  score            Int
  plagiarismConcerns String[] @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
} 